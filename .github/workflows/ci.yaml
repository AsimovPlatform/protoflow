# See: https://docs.github.com/en/actions/writing-workflows
---
name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    
jobs:
  check-formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.80.0
          components: rustfmt
      - name: Check formatting
        run: cargo +1.80.0 fmt --all -- --check 2>/dev/null
  check-targets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - name: macOS
            target: x86_64-apple-darwin
            os: macos-latest
          - name: Windows
            target: x86_64-pc-windows-gnu
            os: windows-latest
    name: Check ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs:
      - check-formatting
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.80.0
          components: rustfmt
          targets: ${{ matrix.target }}
      - name: Build binaries
        id: check-bins
        if: ${{ always() }}
        run: cargo +1.80.0 check --target ${{ matrix.target }} --workspace --bins
      - name: Build tests
        id: check-tests
        if: ${{ always() }}
        run: cargo +1.80.0 check --target ${{ matrix.target }} --workspace --tests
      - name: Build examples
        id: check-examples
        if: ${{ always() }}
        run: cargo +1.80.0 check --target ${{ matrix.target }} --workspace --examples
      - name: Run tests
        id: run-tests
        if: ${{ steps.check-tests.conclusion == 'success' }}
        run: cargo +1.80.0 test --target ${{ matrix.target }} --workspace --no-fail-fast
      - name: Obtain job id
        id: obtain-job-id
        if: ${{ always() }}
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs)
          job_id=$(echo $jobs | jq -r '.jobs[] | select(.name | contains("${{ matrix.name }}")) | .id')
          echo "result=$job_id" >> $GITHUB_OUTPUT
  review-pr:
    name: Review PR
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - check-formatting
      - check-targets
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            if (${{ needs.check-formatting.result != 'success' }} ||
                ${{ needs.check-targets.result != 'success' }}) {
              let FORMATTING_JOB_NAME = 'Check formatting';
              let VERBOSE = true;
              let response = undefined;

              let body = `
                ## ⚠️ CI failed

                | Platform | Name | Status | Details |
                | --- | --- | --- | --- |
              `;

              function get_job_url(job_id) {
                return `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/jobs/${job_id}?check_suite_focus=true`;
              }
              
              function get_step_url(job_id, step_id) {
                let job_url = get_job_url(job_id);
                return `${job_url}#step:${step_id}:0`;
              }
              
              response = await github.rest.actions.listJobsForWorkflowRunAttempt({
                ...context.repo,
                run_id: context.runId,
                attempt_number: context.runAttempt || 1
              });

              let formatting_job = response.data.jobs.find(job => job.name.includes(FORMATTING_JOB_NAME));
              if (formatting_job != undefined && (VERBOSE || formatting_job.conclusion != 'success')) {
                let succeed = formatting_job.conclusion == 'success' ? '✅' : '❌';
                let url = get_job_url(formatting_job.id);
                body += `| | Formatting | ${succeed} | [Details](${url}) |\n`;
              }

              for (let job of response.data.jobs) {
                if (job.name.startsWith('Check') && job.name != formatting_job.name &&
                    (VERBOSE || job.conclusion != 'success')) {
                  let platform = job.name.split(' ')[1];
                  for (let step of job.steps) {
                    if (step.name.startsWith('Build ') || step.name.startsWith('Run ') &&
                        (VERBOSE || step.conclusion != 'success')) {
                      let name = step.name;
                      let succeed = step.conclusion == 'success' ? '✅' : '❌';
                      let url = get_step_url(job.id, step.id);
                      body += `| ${platform} | ${name} | ${succeed} | [Details](${url}) |\n`;
                    }
                  }
                }
              }
            
              await github.rest.pulls.createReview({
                ...context.repo,
                pull_number: context.issue.number,
                event: 'REQUEST_CHANGES',
                body: body,
              });
            } else {
              await github.rest.pulls.createReview({
                ...context.repo,
                pull_number: context.issue.number,
                event: 'APPROVE',
              });
            }
