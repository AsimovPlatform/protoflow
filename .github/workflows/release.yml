name: Release

# TODO:
# - Support signing macos binaries.
# - Pull changes from changes.md

# Trigger on any tag creation.
on:
  push:
    tags:
      - '*'

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-zigbuild: false # no reason to use zigbuild when building for host
            artifact: protoflow-linux-x64
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   use-zigbuild: true
          #   artifact: protoflow-linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            use-zigbuild: true
            artifact: protoflow-darwin-arm64
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   use-zigbuild: true
          #   artifact: protoflow-darwin-x64
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   use-zigbuild: false # zigbuild doesn't support Windows
          #   artifact: protoflow-windows-x64.exe
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust and target
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - name: Install zig
        if: ${{ matrix.use-zigbuild }}
        uses: mlugg/setup-zig@v1
      - name: Install cargo-zigbuild
        if: ${{ matrix.use-zigbuild }}
        run: cargo install --locked cargo-zigbuild
      - name: Build using cargo-zigbuild
        if: ${{ matrix.use-zigbuild }}
        run: cargo zigbuild --release --target ${{ matrix.target }}
      - name: Build
        if: ${{ !matrix.use-zigbuild }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Rename artifact
        run: |
          mkdir output
          mv target/${{ matrix.target }}/release/protoflow${{ matrix.os == 'windows-latest' && '.exe' || '' }} output/${{ matrix.artifact }}
      - name: Strip artifact (*nix)
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: output
        run: strip ${{ matrix.artifact }}
      - name: Compress artifact (*nix)
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: output
        run: gzip -f ${{ matrix.artifact }}
      - name: Archive artifact (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: output
        run: 7z a -tzip ${{ matrix.artifact }}.zip *
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: output/*
          if-no-files-found: error
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Compute checksums for artifacts
        run: |
          for file in artifacts/*; do
            shasum --algorithm 256 "$file" > "$file.sha256"
          done
      - name: Parse changelog
        id: query-release-info
        uses: release-flow/keep-a-changelog-action@v2
        with:
          command: query
          version: latest
          changelog: CHANGES.md
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.query-release-info.outputs.release-notes }}
          tag_name: ${{ github.ref_name }}
          files: artifacts/*
