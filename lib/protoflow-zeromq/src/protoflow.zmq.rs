// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Connect {
    #[prost(int64, tag = "1")]
    pub output: i64,
    #[prost(int64, tag = "2")]
    pub input: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AckConnection {
    #[prost(int64, tag = "1")]
    pub output: i64,
    #[prost(int64, tag = "2")]
    pub input: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(int64, tag = "1")]
    pub output: i64,
    #[prost(int64, tag = "2")]
    pub input: i64,
    #[prost(uint64, tag = "3")]
    pub sequence: u64,
    #[prost(bytes = "vec", tag = "4")]
    pub message: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AckMessage {
    #[prost(int64, tag = "1")]
    pub output: i64,
    #[prost(int64, tag = "2")]
    pub input: i64,
    #[prost(uint64, tag = "3")]
    pub sequence: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CloseOutput {
    #[prost(int64, tag = "1")]
    pub output: i64,
    #[prost(int64, tag = "2")]
    pub input: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CloseInput {
    #[prost(int64, tag = "1")]
    pub input: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    #[prost(oneof = "event::Payload", tags = "1, 2, 3, 4, 5, 6")]
    pub payload: ::core::option::Option<event::Payload>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        Connect(super::Connect),
        #[prost(message, tag = "2")]
        AckConnection(super::AckConnection),
        #[prost(message, tag = "3")]
        Message(super::Message),
        #[prost(message, tag = "4")]
        AckMessage(super::AckMessage),
        #[prost(message, tag = "5")]
        CloseOutput(super::CloseOutput),
        #[prost(message, tag = "6")]
        CloseInput(super::CloseInput),
    }
}
